{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.19.4",
    "schemaVersion": 1004,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      }
    }
  },
  "kind": "Package",
  "canonicalReference": "website!",
  "docComment": "",
  "name": "website",
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "website!",
      "name": "",
      "members": [
        {
          "kind": "Function",
          "canonicalReference": "website!basicAuth:function(1)",
          "docComment": "/**\n * sets and parses basic auth headers if they exist\n *\n * @param req - http request object\n *\n * @param res - http response\n *\n * @param callback - function(username, password)\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function basicAuth(req: "
            },
            {
              "kind": "Reference",
              "text": "http.IncomingMessage",
              "canonicalReference": "!\"\\\"http\\\"\".IncomingMessage:class"
            },
            {
              "kind": "Content",
              "text": ", res: "
            },
            {
              "kind": "Reference",
              "text": "http.ServerResponse",
              "canonicalReference": "!\"\\\"http\\\"\".ServerResponse:class"
            },
            {
              "kind": "Content",
              "text": ", callback: "
            },
            {
              "kind": "Content",
              "text": "(username?: string, password?: string) => void"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "req",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "res",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "callback",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "basicAuth"
        },
        {
          "kind": "Function",
          "canonicalReference": "website!createAction:function(1)",
          "docComment": "/**\n * responds with the correct service depending on the action\n *\n * @param opts - options to pass Service\n *\n * @param req - http request object\n *\n * @param res - http response\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function createAction(opts: "
            },
            {
              "kind": "Reference",
              "text": "ServiceOptions",
              "canonicalReference": "website!ServiceOptions:interface"
            },
            {
              "kind": "Content",
              "text": ", req: "
            },
            {
              "kind": "Reference",
              "text": "http.IncomingMessage",
              "canonicalReference": "!\"\\\"http\\\"\".IncomingMessage:class"
            },
            {
              "kind": "Content",
              "text": ", res: "
            },
            {
              "kind": "Reference",
              "text": "http.ServerResponse",
              "canonicalReference": "!\"\\\"http\\\"\".ServerResponse:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Reference",
              "text": "Service",
              "canonicalReference": "website!Service:class"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 7,
            "endIndex": 8
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "opts",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "req",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "res",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            }
          ],
          "name": "createAction"
        },
        {
          "kind": "Interface",
          "canonicalReference": "website!FetchData:interface",
          "docComment": "/**\n * an http duplex object (see below) with these extra properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface FetchData extends "
            },
            {
              "kind": "Reference",
              "text": "HttpDuplex",
              "canonicalReference": "website!HttpDuplex:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "FetchData",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!FetchData#commit:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "commit: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "commit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!FetchData#repo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repo: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "repo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "website!Git:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Git extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "!EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            },
            {
              "kind": "Content",
              "text": "implements "
            },
            {
              "kind": "Reference",
              "text": "GitEvents",
              "canonicalReference": "website!GitEvents:interface"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Git",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "website!Git:constructor(1)",
              "docComment": "/**\n * Handles invoking the git-*-pack binaries\n *\n * @param repoDir - Create a new repository collection from the directory `repoDir`. `repoDir` should be entirely empty except for git repo directories. If `repoDir` is a function, `repoDir(repo)` will be used to dynamically resolve project directories. The return value of `repoDir(repo)` should be a string path specifying where to put the string `repo`. Make sure to return the same value for `repo` every time since `repoDir(repo)` will be called multiple times.\n *\n * @param options - options that can be applied on the new instance being created\n *\n * @param  - options.autoCreate - By default, repository targets will be created if they don't exist. You can disable that behavior with `options.autoCreate = true`\n *\n * @param  - options.authenticate - a function that has the following arguments ({ type, repo, username, password, headers }, next) and will be called when a request comes through if set\n *\n * authenticate: ({ type, repo, username, password, headers }, next) => { console.log(type, repo, username, password); next(); } // alternatively you can also pass authenticate a promise authenticate: ({ type, repo, username, password, headers }, next) => { console.log(type, repo, username, password); return new Promise((resolve, reject) => { if(username === 'foo') { return resolve(); } return reject(\"sorry you don't have access to this content\"); }); }\n *\n * @param  - options.checkout - If `opts.checkout` is true, create and expected checked-out repos instead of bare repos\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(repoDir: "
                },
                {
                  "kind": "Content",
                  "text": "string | ((dir?: string) => string)"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "GitOptions",
                  "canonicalReference": "website!GitOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "repoDir",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Property",
              "canonicalReference": "website!Git#authenticate:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "authenticate: "
                },
                {
                  "kind": "Content",
                  "text": "((options: "
                },
                {
                  "kind": "Reference",
                  "text": "GitAuthenticateOptions",
                  "canonicalReference": "website!GitAuthenticateOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", callback: (error?: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void | undefined) => void | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined | void> | undefined) | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "authenticate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!Git#autoCreate:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autoCreate: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "autoCreate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!Git#checkout:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checkout: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "checkout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "website!Git#close:member(1)",
              "docComment": "/**\n * closes the server instance\n *\n * @param will - resolve or reject when the server closes or fails to close.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "close(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "close"
            },
            {
              "kind": "Method",
              "canonicalReference": "website!Git#create:member(1)",
              "docComment": "/**\n * Create a new bare repository `repoName` in the instance repository directory.\n *\n * @param repo - the name of the repo\n *\n * @param callback - Optionally get a callback `cb(err)` to be notified when the repository was created.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "create(repo: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", callback: "
                },
                {
                  "kind": "Content",
                  "text": "(error?: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "repo",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "create"
            },
            {
              "kind": "Property",
              "canonicalReference": "website!Git#dirMap:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "dirMap: "
                },
                {
                  "kind": "Content",
                  "text": "(dir?: string) => string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "dirMap",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "website!Git#exists:member(1)",
              "docComment": "/**\n * Find out whether `repoName` exists in the callback `cb(exists)`.\n *\n * @param repo - name of the repo\n *\n * @param callback - function to be called when finished\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exists(repo: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "repo",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "exists"
            },
            {
              "kind": "Method",
              "canonicalReference": "website!Git#getType:member(1)",
              "docComment": "/**\n * returns the typeof service being process. This will respond with either fetch or push.\n *\n * @param service - the service type\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "getType(service: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "service",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "getType"
            },
            {
              "kind": "Method",
              "canonicalReference": "website!Git#handle:member(1)",
              "docComment": "/**\n * Handle incoming HTTP requests with a connect-style middleware\n *\n * @param http - request object\n *\n * @param http - response object\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "handle(req: "
                },
                {
                  "kind": "Reference",
                  "text": "http.IncomingMessage",
                  "canonicalReference": "!\"\\\"http\\\"\".IncomingMessage:class"
                },
                {
                  "kind": "Content",
                  "text": ", res: "
                },
                {
                  "kind": "Reference",
                  "text": "http.ServerResponse",
                  "canonicalReference": "!\"\\\"http\\\"\".ServerResponse:class"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "req",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "res",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "handle"
            },
            {
              "kind": "Method",
              "canonicalReference": "website!Git#list:member(1)",
              "docComment": "/**\n * Get a list of all the repositories\n *\n * @param callback - function to be called when repositories have been found `function(error, repos)`\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "list(callback: "
                },
                {
                  "kind": "Content",
                  "text": "(error: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined, repos?: string[]) => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 4
                  }
                }
              ],
              "name": "list"
            },
            {
              "kind": "Method",
              "canonicalReference": "website!Git#list:member(2)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "list(): "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string[]>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [],
              "name": "list"
            },
            {
              "kind": "Method",
              "canonicalReference": "website!Git#listen:member(1)",
              "docComment": "/**\n * starts a git server on the given port\n *\n * @param port - the port to start the server on\n *\n * @param options - the options to add extended functionality to the server\n *\n * @param  - options.type - this is either https or http (the default is http)\n *\n * @param  - options.key - the key file for the https server\n *\n * @param  - options.cert - the cert file for the https server\n *\n * @param callback - the function to call when server is started or error has occurred\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "listen(port: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", options?: "
                },
                {
                  "kind": "Reference",
                  "text": "GitServerOptions",
                  "canonicalReference": "website!~GitServerOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", callback?: "
                },
                {
                  "kind": "Content",
                  "text": "() => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Reference",
                  "text": "Git",
                  "canonicalReference": "website!Git:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "port",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "options",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "callback",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "listen"
            },
            {
              "kind": "Method",
              "canonicalReference": "website!Git#mkdir:member(1)",
              "docComment": "/**\n * Create a subdirectory `dir` in the repo dir with a callback.\n *\n * @param dir - directory name\n *\n * @param callback - callback to be called when finished\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "mkdir(dir: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "dir",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "mkdir"
            },
            {
              "kind": "Property",
              "canonicalReference": "website!Git#server:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "server: "
                },
                {
                  "kind": "Reference",
                  "text": "https.Server",
                  "canonicalReference": "!\"\\\"https\\\"\".Server:class"
                },
                {
                  "kind": "Content",
                  "text": " | "
                },
                {
                  "kind": "Reference",
                  "text": "http.Server",
                  "canonicalReference": "!\"\\\"http\\\"\".Server:class"
                },
                {
                  "kind": "Content",
                  "text": " | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "server",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 5
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": [
            {
              "startIndex": 4,
              "endIndex": 6
            }
          ]
        },
        {
          "kind": "Interface",
          "canonicalReference": "website!GitAuthenticateOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GitAuthenticateOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "GitAuthenticateOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!GitAuthenticateOptions#headers:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "headers: "
                },
                {
                  "kind": "Reference",
                  "text": "http.IncomingHttpHeaders",
                  "canonicalReference": "!\"\\\"http\\\"\".IncomingHttpHeaders:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "headers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!GitAuthenticateOptions#repo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repo: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "repo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!GitAuthenticateOptions#type:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "type: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "type",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!GitAuthenticateOptions#user:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "user: "
                },
                {
                  "kind": "Content",
                  "text": "(() => "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<[string | undefined, string | undefined]>) & ((callback: (username?: string | undefined, password?: string | undefined) => void) => void)"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "user",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "website!GitEvents:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GitEvents "
            }
          ],
          "releaseTag": "Public",
          "name": "GitEvents",
          "members": [
            {
              "kind": "MethodSignature",
              "canonicalReference": "website!GitEvents#on:member(1)",
              "docComment": "/**\n * @example\n *\n * repos.on('push', function (push) { ... }\n *\n * Emitted when somebody does a `git push` to the repo.\n *\n * Exactly one listener must call `push.accept()` or `push.reject()`. If there are no listeners, `push.accept()` is called automatically.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'push'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(push: "
                },
                {
                  "kind": "Reference",
                  "text": "PushData",
                  "canonicalReference": "website!PushData:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "website!GitEvents#on:member(2)",
              "docComment": "/**\n * @example\n *\n * repos.on('tag', function (tag) { ... }\n *\n * Emitted when somebody does a `git push --tags` to the repo. Exactly one listener must call `tag.accept()` or `tag.reject()`. If there are No listeners, `tag.accept()` is called automatically.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'tag'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(tag: "
                },
                {
                  "kind": "Reference",
                  "text": "TagData",
                  "canonicalReference": "website!TagData:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 2,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "website!GitEvents#on:member(3)",
              "docComment": "/**\n * @example\n *\n * repos.on('fetch', function (fetch) { ... }\n *\n * Emitted when somebody does a `git fetch` to the repo (which happens whenever you do a `git pull` or a `git clone`).\n *\n * Exactly one listener must call `fetch.accept()` or `fetch.reject()`. If there are no listeners, `fetch.accept()` is called automatically.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'fetch'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(fetch: "
                },
                {
                  "kind": "Reference",
                  "text": "FetchData",
                  "canonicalReference": "website!FetchData:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 3,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "website!GitEvents#on:member(4)",
              "docComment": "/**\n * @example\n *\n * repos.on('info', function (info) { ... }\n *\n * Emitted when the repo is queried for info before doing other commands.\n *\n * Exactly one listener must call `info.accept()` or `info.reject()`. If there are no listeners, `info.accept()` is called automatically.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'info'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(info: "
                },
                {
                  "kind": "Reference",
                  "text": "InfoData",
                  "canonicalReference": "website!InfoData:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 4,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "on"
            },
            {
              "kind": "MethodSignature",
              "canonicalReference": "website!GitEvents#on:member(5)",
              "docComment": "/**\n * @example\n *\n * repos.on('head', function (head) { ... }\n *\n * Emitted when the repo is queried for HEAD before doing other commands.\n *\n * Exactly one listener must call `head.accept()` or `head.reject()`. If there are no listeners, `head.accept()` is called automatically.\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "on(event: "
                },
                {
                  "kind": "Content",
                  "text": "'head'"
                },
                {
                  "kind": "Content",
                  "text": ", listener: "
                },
                {
                  "kind": "Content",
                  "text": "(head: "
                },
                {
                  "kind": "Reference",
                  "text": "HeadData",
                  "canonicalReference": "website!HeadData:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 5,
              "parameters": [
                {
                  "parameterName": "event",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "listener",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 6
                  }
                }
              ],
              "name": "on"
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "website!GitOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface GitOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "GitOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!GitOptions#authenticate:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "authenticate?: "
                },
                {
                  "kind": "Content",
                  "text": "(options: "
                },
                {
                  "kind": "Reference",
                  "text": "GitAuthenticateOptions",
                  "canonicalReference": "website!GitAuthenticateOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", callback: (error?: "
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": ") => void | undefined) => void | "
                },
                {
                  "kind": "Reference",
                  "text": "Promise",
                  "canonicalReference": "!Promise:interface"
                },
                {
                  "kind": "Content",
                  "text": "<"
                },
                {
                  "kind": "Reference",
                  "text": "Error",
                  "canonicalReference": "!Error:interface"
                },
                {
                  "kind": "Content",
                  "text": " | undefined | void> | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "authenticate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 10
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!GitOptions#autoCreate:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "autoCreate?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "autoCreate",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!GitOptions#checkout:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "checkout?: "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": true,
              "releaseTag": "Public",
              "name": "checkout",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "website!HeadData:interface",
          "docComment": "/**\n * an http duplex object (see below) with these extra properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface HeadData extends "
            },
            {
              "kind": "Reference",
              "text": "HttpDuplex",
              "canonicalReference": "website!HttpDuplex:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "HeadData",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!HeadData#repo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repo: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "repo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "website!HttpDuplex:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class HttpDuplex extends "
            },
            {
              "kind": "Reference",
              "text": "EventEmitter",
              "canonicalReference": "!EventEmitter:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "HttpDuplex",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "website!HttpDuplex:constructor(1)",
              "docComment": "/**\n * Constructs a proxy object over input and output resulting in a unified stream. Generally meant to combine request and response streams in the http.request event\n *\n * @example\n *\n * <caption> A simple example is shown below </caption> ``` http.createServer(function (req, res) { var dup = new HttpDuplex(req, res); res.end(\"Request: \" + req.method + \" \" + req.url); }).listen(80); ```\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_event_request | request}\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_class_http_incomingmessage | http.IncomingMessage}\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_class_http_serverresponse | http.ServerResponse}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(input: "
                },
                {
                  "kind": "Reference",
                  "text": "http.IncomingMessage",
                  "canonicalReference": "!\"\\\"http\\\"\".IncomingMessage:class"
                },
                {
                  "kind": "Content",
                  "text": ", output: "
                },
                {
                  "kind": "Reference",
                  "text": "http.ServerResponse",
                  "canonicalReference": "!\"\\\"http\\\"\".ServerResponse:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "input",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "output",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "website!HttpDuplex#accept:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "accept"
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#complete:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get complete(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "complete",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#connection:member",
              "docComment": "/**\n * Reference to the underlying socket for the request connection.\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_request_socket | request.Socket}\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get connection(): "
                },
                {
                  "kind": "Content",
                  "text": "import(\"net\")."
                },
                {
                  "kind": "Reference",
                  "text": "Socket",
                  "canonicalReference": "!\"\\\"net\\\"\".Socket:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "connection",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "website!HttpDuplex#cork:member(1)",
              "docComment": "/**\n * Buffers written data in memory. This data will be flushed when either the uncork or end methods are called.\n *\n * @example\n *\n * request.cork(); request.write('buffer data '); request.write('before sending '); request.uncork();\n *\n * @see\n *\n * uncork\n *\n * @see\n *\n * {@link https://nodejs.org/api/stream.html#stream_writable_cork | stream.Writeable.cork}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cork(): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "cork"
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#cwd:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cwd: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cwd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "website!HttpDuplex#destroy:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "destroy(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "destroy"
            },
            {
              "kind": "Method",
              "canonicalReference": "website!HttpDuplex#end:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "end(reason?: "
                },
                {
                  "kind": "Content",
                  "text": "any"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "reason",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "name": "end"
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#exists:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "exists: "
                },
                {
                  "kind": "Content",
                  "text": "boolean | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "exists",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#headers:member",
              "docComment": "/**\n * Request/response headers. Key-value pairs of header names and values. Header names are always lower-case.\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_message_headers | message.headers}\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get headers(): "
                },
                {
                  "kind": "Reference",
                  "text": "http.IncomingHttpHeaders",
                  "canonicalReference": "!\"\\\"http\\\"\".IncomingHttpHeaders:interface"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "headers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#httpVersion:member",
              "docComment": "/**\n * Requested HTTP Version sent by the client. Usually either '1.0' or '1.1'\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_message_httpversion | message.httpVersion}\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get httpVersion(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "httpVersion",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#httpVersionMajor:member",
              "docComment": "/**\n * First integer in the httpVersion string\n *\n * @see\n *\n * httpVersion\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get httpVersionMajor(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "httpVersionMajor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#httpVersionMinor:member",
              "docComment": "/**\n * Second integer ni the httpVersion string\n *\n * @see\n *\n * httpVersion\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get httpVersionMinor(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "httpVersionMinor",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#method:member",
              "docComment": "/**\n * Request method of the incoming request.\n *\n * @example\n *\n * 'GET', 'DELETE'\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_event_request | request}\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_class_http_serverresponse | http.ServerResponse}\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get method(): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "method",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#readable:member",
              "docComment": "/**\n * Is this stream readable.\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get readable(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "readable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "website!HttpDuplex#reject:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reject(code: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", msg: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "code",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "msg",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "reject"
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#repo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repo: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "repo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#req:member",
              "docComment": "/**\n * A IncomingMessage created by http.Server or http.ClientRequest usually passed as the first parameter to the 'request' and 'response' events. Implements Readable Stream interface but may not be a decendant thereof.\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_event_request | request}\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_class_http_incomingmessage | http.IncomingMessage}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "req: "
                },
                {
                  "kind": "Reference",
                  "text": "http.IncomingMessage",
                  "canonicalReference": "!\"\\\"http\\\"\".IncomingMessage:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "req",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#res:member",
              "docComment": "/**\n * Created http.server. Passed as the second parameter to the 'request' event. The response implements Writable Stream interface but isn't a descendent thereof.\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_event_request | request}\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_class_http_serverresponse | http.ServerResponse}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "res: "
                },
                {
                  "kind": "Reference",
                  "text": "http.ServerResponse",
                  "canonicalReference": "!\"\\\"http\\\"\".ServerResponse:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "res",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "website!HttpDuplex#setHeader:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "setHeader(arg0: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", arg1: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "arg0",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "arg1",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "setHeader"
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#socket:member",
              "docComment": "/**\n * net.Socket object associated with the connection.\n *\n * @see\n *\n * {@link https://nodejs.org/api/net.html#net_class_net_socket | net.Socket}\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get socket(): "
                },
                {
                  "kind": "Content",
                  "text": "import(\"net\")."
                },
                {
                  "kind": "Reference",
                  "text": "Socket",
                  "canonicalReference": "!\"\\\"net\\\"\".Socket:class"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "socket",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#statusCode:member",
              "docComment": "/**\n * The HTTP status code. Generally assigned before sending headers for a response to a client.\n *\n * @example\n *\n * request.statusCode = 404;\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_response_statuscode | response.statusCode}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get statusCode(): "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset statusCode(val: number);"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "statusCode",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#statusMessage:member",
              "docComment": "/**\n * Controls the status message sent to the client as long as an explicit call to response.writeHead() isn't made If ignored or the value is undefined, the default message corresponding to the status code will be used.\n *\n * @example\n *\n * request.statusMessage = 'Document Not found';\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_response_statusmessage | response.statusMessage}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get statusMessage(): "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                },
                {
                  "kind": "Content",
                  "text": "\n\nset statusMessage(val: string);"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "statusMessage",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#trailers:member",
              "docComment": "/**\n * Request/response trailer headers. Just like {@link headers} except these are only written after the initial response to the client. This object is only populated at the 'end' event and only work if a 'transfer-encoding: chunked' header is sent in the initial response.\n *\n * @see\n *\n * headers\n *\n * @see\n *\n * addTrailers\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_message_trailers | message.trailers}\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_response_addtrailers_headers | response.addTrailers}\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get trailers(): "
                },
                {
                  "kind": "Reference",
                  "text": "NodeJS.Dict",
                  "canonicalReference": "!NodeJS.Dict:interface"
                },
                {
                  "kind": "Content",
                  "text": "<string>"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "trailers",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 3
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "website!HttpDuplex#uncork:member(1)",
              "docComment": "/**\n * Flushes all data buffered since cork() was called.\n *\n * @see\n *\n * cork\n *\n * @see\n *\n * {@link https://nodejs.org/api/stream.html#stream_writable_uncork | stream.Writeable.uncork}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "uncork(): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "uncork"
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#url:member",
              "docComment": "/**\n * Request URL string.\n *\n * @example\n *\n * <caption>A request made as:</caption> GET /info?check=none HTTP/1.1\n *\n * @example\n *\n * <caption>Will return the string</caption> '/info?check=none'\n *\n * @readonly\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get url(): "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "url",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!HttpDuplex#writable:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "get writable(): "
                },
                {
                  "kind": "Content",
                  "text": "boolean"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "writable",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "website!HttpDuplex#writeHead:member(1)",
              "docComment": "/**\n * Sends a response header to the client request. Must only be called one time and before calling response.end().\n *\n * @param statusCode - 3-digit HTTP status code, like 404\n *\n * @param statusMessage - An optional human readable status message to send with the status code\n *\n * @param headers - An object containing the response headers to send\n *\n * @example\n *\n * var content = 'Under Construction...'; response.writeHead(200, { 'Content-Length': Buffer.byteLength(content), 'Content-Type': 'text/plain' }); response.end(content);\n *\n * @see\n *\n * {@link https://nodejs.org/api/http.html#http_response_writehead_statuscode_statusmessage_headers | response.writeHead}\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "writeHead(statusCode: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", statusMessage: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ", headers: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "this"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "statusCode",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "statusMessage",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "headers",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ],
              "name": "writeHead"
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "website!InfoData:interface",
          "docComment": "/**\n * an http duplex object (see below) with these extra properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface InfoData extends "
            },
            {
              "kind": "Reference",
              "text": "HttpDuplex",
              "canonicalReference": "website!HttpDuplex:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "InfoData",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!InfoData#repo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repo: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "repo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Function",
          "canonicalReference": "website!infoResponse:function(1)",
          "docComment": "/**\n * sends http response using the appropriate output from service call\n *\n * @param git - an instance of git object\n *\n * @param repo - the repository\n *\n * @param service - the method that is responding infoResponse (push, pull, clone)\n *\n * @param req - http request object\n *\n * @param res - http response\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function infoResponse(git: "
            },
            {
              "kind": "Reference",
              "text": "Git",
              "canonicalReference": "website!Git:class"
            },
            {
              "kind": "Content",
              "text": ", repo: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", service: "
            },
            {
              "kind": "Reference",
              "text": "ServiceString",
              "canonicalReference": "website!ServiceString:type"
            },
            {
              "kind": "Content",
              "text": ", req: "
            },
            {
              "kind": "Reference",
              "text": "http.IncomingMessage",
              "canonicalReference": "!\"\\\"http\\\"\".IncomingMessage:class"
            },
            {
              "kind": "Content",
              "text": ", res: "
            },
            {
              "kind": "Reference",
              "text": "http.ServerResponse",
              "canonicalReference": "!\"\\\"http\\\"\".ServerResponse:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "git",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "parameterName": "repo",
              "parameterTypeTokenRange": {
                "startIndex": 3,
                "endIndex": 4
              }
            },
            {
              "parameterName": "service",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "req",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "res",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "infoResponse"
        },
        {
          "kind": "Function",
          "canonicalReference": "website!noCache:function(1)",
          "docComment": "/**\n * adds headers to the response object to add cache control\n *\n * @param res - http response\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function noCache(res: "
            },
            {
              "kind": "Reference",
              "text": "http.ServerResponse",
              "canonicalReference": "!\"\\\"http\\\"\".ServerResponse:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "res",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "noCache"
        },
        {
          "kind": "Function",
          "canonicalReference": "website!packSideband:function(1)",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function packSideband(s: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "s",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "packSideband"
        },
        {
          "kind": "Function",
          "canonicalReference": "website!parseGitName:function(1)",
          "docComment": "/**\n * parses a git string and returns the repo name\n *\n * @param repo - the raw repo name containing .git\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function parseGitName(repo: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 3,
            "endIndex": 4
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "repo",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "name": "parseGitName"
        },
        {
          "kind": "Interface",
          "canonicalReference": "website!PushData:interface",
          "docComment": "/**\n * Is a http duplex object (see below) with these extra properties\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface PushData extends "
            },
            {
              "kind": "Reference",
              "text": "HttpDuplex",
              "canonicalReference": "website!HttpDuplex:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "PushData",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!PushData#branch:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "branch: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "branch",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!PushData#commit:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "commit: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "commit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!PushData#repo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repo: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "repo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        },
        {
          "kind": "Class",
          "canonicalReference": "website!Service:class",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare class Service extends "
            },
            {
              "kind": "Reference",
              "text": "HttpDuplex",
              "canonicalReference": "website!HttpDuplex:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "Service",
          "members": [
            {
              "kind": "Constructor",
              "canonicalReference": "website!Service:constructor(1)",
              "docComment": "/**\n * Handles invoking the git-*-pack binaries\n *\n * @param opts - options to bootstrap the service object\n *\n * @param req - http request object\n *\n * @param res - http response\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "constructor(opts: "
                },
                {
                  "kind": "Reference",
                  "text": "ServiceOptions",
                  "canonicalReference": "website!ServiceOptions:interface"
                },
                {
                  "kind": "Content",
                  "text": ", req: "
                },
                {
                  "kind": "Reference",
                  "text": "http.IncomingMessage",
                  "canonicalReference": "!\"\\\"http\\\"\".IncomingMessage:class"
                },
                {
                  "kind": "Content",
                  "text": ", res: "
                },
                {
                  "kind": "Reference",
                  "text": "http.ServerResponse",
                  "canonicalReference": "!\"\\\"http\\\"\".ServerResponse:class"
                },
                {
                  "kind": "Content",
                  "text": ");"
                }
              ],
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "opts",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "req",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                },
                {
                  "parameterName": "res",
                  "parameterTypeTokenRange": {
                    "startIndex": 5,
                    "endIndex": 6
                  }
                }
              ]
            },
            {
              "kind": "Method",
              "canonicalReference": "website!Service#accept:member(1)",
              "docComment": "/**\n * accepts request to access resource\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "accept(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "accept"
            },
            {
              "kind": "Property",
              "canonicalReference": "website!Service#commit:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "commit: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "commit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!Service#cwd:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cwd: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cwd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!Service#evName:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "evName: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "evName",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!Service#last:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "last: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "last",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "website!Service#log:member(1)",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "log(): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [],
              "name": "log"
            },
            {
              "kind": "Property",
              "canonicalReference": "website!Service#logs:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "logs: "
                },
                {
                  "kind": "Content",
                  "text": "string[]"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "logs",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Method",
              "canonicalReference": "website!Service#reject:member(1)",
              "docComment": "/**\n * reject request in flight\n *\n * @param code - http response code\n *\n * @param msg - message that should be displayed on the client\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "reject(code: "
                },
                {
                  "kind": "Content",
                  "text": "number"
                },
                {
                  "kind": "Content",
                  "text": ", msg: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": "): "
                },
                {
                  "kind": "Content",
                  "text": "void"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "isStatic": false,
              "returnTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              },
              "releaseTag": "Public",
              "overloadIndex": 1,
              "parameters": [
                {
                  "parameterName": "code",
                  "parameterTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "parameterName": "msg",
                  "parameterTypeTokenRange": {
                    "startIndex": 3,
                    "endIndex": 4
                  }
                }
              ],
              "name": "reject"
            },
            {
              "kind": "Property",
              "canonicalReference": "website!Service#repo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repo: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "repo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!Service#service:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "service: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "service",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!Service#status:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "status: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "status",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            },
            {
              "kind": "Property",
              "canonicalReference": "website!Service#username:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "username: "
                },
                {
                  "kind": "Content",
                  "text": "string | undefined"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "username",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "isStatic": false
            }
          ],
          "extendsTokenRange": {
            "startIndex": 1,
            "endIndex": 3
          },
          "implementsTokenRanges": []
        },
        {
          "kind": "Interface",
          "canonicalReference": "website!ServiceOptions:interface",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface ServiceOptions "
            }
          ],
          "releaseTag": "Public",
          "name": "ServiceOptions",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!ServiceOptions#cwd:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "cwd: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "cwd",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!ServiceOptions#repo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repo: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "repo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!ServiceOptions#service:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "service: "
                },
                {
                  "kind": "Reference",
                  "text": "ServiceString",
                  "canonicalReference": "website!ServiceString:type"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "service",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": []
        },
        {
          "kind": "Function",
          "canonicalReference": "website!serviceRespond:function(1)",
          "docComment": "/**\n * execute given git operation and respond\n *\n * @param dup - duplex object to catch errors\n *\n * @param service - the method that is responding infoResponse (push, pull, clone)\n *\n * @param repoLocation - the repo path on disk\n *\n * @param res - http response\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare function serviceRespond(dup: "
            },
            {
              "kind": "Reference",
              "text": "HttpDuplex",
              "canonicalReference": "website!HttpDuplex:class"
            },
            {
              "kind": "Content",
              "text": " | "
            },
            {
              "kind": "Reference",
              "text": "Git",
              "canonicalReference": "website!Git:class"
            },
            {
              "kind": "Content",
              "text": ", service: "
            },
            {
              "kind": "Reference",
              "text": "ServiceString",
              "canonicalReference": "website!ServiceString:type"
            },
            {
              "kind": "Content",
              "text": ", repoLocation: "
            },
            {
              "kind": "Content",
              "text": "string"
            },
            {
              "kind": "Content",
              "text": ", res: "
            },
            {
              "kind": "Reference",
              "text": "http.ServerResponse",
              "canonicalReference": "!\"\\\"http\\\"\".ServerResponse:class"
            },
            {
              "kind": "Content",
              "text": "): "
            },
            {
              "kind": "Content",
              "text": "void"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "returnTypeTokenRange": {
            "startIndex": 11,
            "endIndex": 12
          },
          "releaseTag": "Public",
          "overloadIndex": 1,
          "parameters": [
            {
              "parameterName": "dup",
              "parameterTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 4
              }
            },
            {
              "parameterName": "service",
              "parameterTypeTokenRange": {
                "startIndex": 5,
                "endIndex": 6
              }
            },
            {
              "parameterName": "repoLocation",
              "parameterTypeTokenRange": {
                "startIndex": 7,
                "endIndex": 8
              }
            },
            {
              "parameterName": "res",
              "parameterTypeTokenRange": {
                "startIndex": 9,
                "endIndex": 10
              }
            }
          ],
          "name": "serviceRespond"
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "website!ServiceString:type",
          "docComment": "",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export declare type ServiceString = "
            },
            {
              "kind": "Content",
              "text": "'upload-pack' | 'receive-pack'"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "releaseTag": "Public",
          "name": "ServiceString",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Interface",
          "canonicalReference": "website!TagData:interface",
          "docComment": "/**\n * An http duplex object (see below) with these extra properties:\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export interface TagData extends "
            },
            {
              "kind": "Reference",
              "text": "HttpDuplex",
              "canonicalReference": "website!HttpDuplex:class"
            },
            {
              "kind": "Content",
              "text": " "
            }
          ],
          "releaseTag": "Public",
          "name": "TagData",
          "members": [
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!TagData#commit:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "commit: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "commit",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!TagData#repo:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "repo: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "repo",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            },
            {
              "kind": "PropertySignature",
              "canonicalReference": "website!TagData#version:member",
              "docComment": "",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "version: "
                },
                {
                  "kind": "Content",
                  "text": "string"
                },
                {
                  "kind": "Content",
                  "text": ";"
                }
              ],
              "isOptional": false,
              "releaseTag": "Public",
              "name": "version",
              "propertyTypeTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              }
            }
          ],
          "extendsTokenRanges": [
            {
              "startIndex": 1,
              "endIndex": 3
            }
          ]
        }
      ]
    }
  ]
}
