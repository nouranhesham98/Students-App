/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
/// <reference types="node" />
import http from 'http';
import EventEmitter from 'events';
export declare class HttpDuplex extends EventEmitter {
    setHeader(arg0: string, arg1: string): void;
    end(reason?: any): void;
    destroy(): void;
    accept(): void;
    reject(code: number, msg: string): void;
    /**
     * A IncomingMessage created by http.Server or http.ClientRequest usually passed as the
     * first parameter to the 'request' and 'response' events. Implements Readable Stream interface
     * but may not be a decendant thereof.
     * @see {@link https://nodejs.org/api/http.html#http_event_request|request}
     * @see {@link https://nodejs.org/api/http.html#http_class_http_incomingmessage|http.IncomingMessage}
     *
     */
    req: http.IncomingMessage;
    /**
     * Created http.server. Passed as the second parameter to the 'request' event.
     * The response implements Writable Stream interface but isn't a descendent thereof.
     * @see {@link https://nodejs.org/api/http.html#http_event_request|request}
     * @see {@link https://nodejs.org/api/http.html#http_class_http_serverresponse|http.ServerResponse}
     */
    res: http.ServerResponse;
    cwd: string | undefined;
    repo: string | undefined;
    exists: boolean | undefined;
    /**
     * Constructs a proxy object over input and output resulting in a unified stream.
     * Generally meant to combine request and response streams in the http.request event
     * @see {@link https://nodejs.org/api/http.html#http_event_request|request}
     * @see {@link https://nodejs.org/api/http.html#http_class_http_incomingmessage|http.IncomingMessage}
     * @see {@link https://nodejs.org/api/http.html#http_class_http_serverresponse|http.ServerResponse}
     * @example <caption> A simple example is shown below </caption>
  
      ```js
      http.createServer(function (req, res) {
          var dup = new HttpDuplex(req, res);
          res.end("Request: " + req.method + " " + req.url);
      }).listen(80);
      ```
     */
    constructor(input: http.IncomingMessage, output: http.ServerResponse);
    get complete(): boolean;
    /**
     * Reference to the underlying socket for the request connection.
     * @readonly
     * @see {@link https://nodejs.org/api/http.html#http_request_socket|request.Socket}
     */
    get connection(): import("net").Socket;
    /**
     * Request/response headers. Key-value pairs of header names and values. Header names are always lower-case.
     * @readonly
     * @see {@link https://nodejs.org/api/http.html#http_message_headers|message.headers}
     */
    get headers(): http.IncomingHttpHeaders;
    /**
     * Requested HTTP Version sent by the client. Usually either '1.0' or '1.1'
     * @see {@link https://nodejs.org/api/http.html#http_message_httpversion|message.httpVersion}
     * @readonly
     */
    get httpVersion(): string;
    /**
     * First integer in the httpVersion string
     * @see httpVersion
     * @readonly
     */
    get httpVersionMajor(): number;
    /**
     * Second integer ni the httpVersion string
     * @see httpVersion
     * @readonly
     */
    get httpVersionMinor(): number;
    /**
     * Request method of the incoming request.
     * @see {@link https://nodejs.org/api/http.html#http_event_request|request}
     * @see {@link https://nodejs.org/api/http.html#http_class_http_serverresponse|http.ServerResponse}
     * @example 'GET', 'DELETE'
     * @readonly
     */
    get method(): string | undefined;
    /**
     * Is this stream readable.
     * @readonly
     */
    get readable(): boolean;
    /**
     * net.Socket object associated with the connection.
     * @see {@link https://nodejs.org/api/net.html#net_class_net_socket|net.Socket}
     * @readonly
     */
    get socket(): import("net").Socket;
    /**
     * The HTTP status code. Generally assigned before sending headers for a response to a client.
     * @see {@link https://nodejs.org/api/http.html#http_response_statuscode|response.statusCode}
     * @example request.statusCode = 404;
     */
    get statusCode(): number;
    set statusCode(val: number);
    /**
     * Controls the status message sent to the client as long as an explicit call to response.writeHead() isn't made
     * If ignored or the value is undefined, the default message corresponding to the status code will be used.
     * @see {@link https://nodejs.org/api/http.html#http_response_statusmessage|response.statusMessage}
     * @example request.statusMessage = 'Document Not found';
     */
    get statusMessage(): string;
    set statusMessage(val: string);
    /**
     * Request/response trailer headers. Just like {@link headers} except these are only written
     * after the initial response to the client.
     * This object is only populated at the 'end' event and only work if a 'transfer-encoding: chunked'
     * header is sent in the initial response.
     * @readonly
     * @see headers
     * @see addTrailers
     * @see {@link https://nodejs.org/api/http.html#http_message_trailers|message.trailers}
     * @see {@link https://nodejs.org/api/http.html#http_response_addtrailers_headers|response.addTrailers}
     */
    get trailers(): NodeJS.Dict<string>;
    /**
     * Request URL string.
     * @example <caption>A request made as:</caption>
     * GET /info?check=none HTTP/1.1
     * @example <caption>Will return the string</caption>
     * '/info?check=none'
     * @readonly
     */
    get url(): string | undefined;
    get writable(): boolean;
    /**
     * Sends a response header to the client request. Must only be called one time and before calling response.end().
     * @param statusCode 3-digit HTTP status code, like 404
     * @param statusMessage - An optional human readable status message to send with the status code
     * @param headers - An object containing the response headers to send
     * @see {@link https://nodejs.org/api/http.html#http_response_writehead_statuscode_statusmessage_headers|response.writeHead}
     * @example var content = 'Under Construction...';
     * response.writeHead(200, {
     *     'Content-Length': Buffer.byteLength(content),
     *     'Content-Type': 'text/plain'
     * });
     * response.end(content);
     */
    writeHead(statusCode: number, statusMessage: string, headers: string[]): this;
    /**
     * Buffers written data in memory. This data will be flushed when either the uncork or end methods are called.
     * @see uncork
     * @see {@link https://nodejs.org/api/stream.html#stream_writable_cork|stream.Writeable.cork}
     * @example
     * request.cork();
     * request.write('buffer data ');
     * request.write('before sending ');
     * request.uncork();
     */
    cork(): this;
    /**
     * Flushes all data buffered since cork() was called.
     * @see cork
     * @see {@link https://nodejs.org/api/stream.html#stream_writable_uncork|stream.Writeable.uncork}
     */
    uncork(): this;
}
//# sourceMappingURL=http-duplex.d.ts.map