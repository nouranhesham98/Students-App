/// <reference types="node" />
import http from 'http';
import { HttpDuplex } from './http-duplex';
import { ServiceString } from './types';
export interface ServiceOptions {
    repo: string;
    cwd: string;
    service: ServiceString;
}
export declare class Service extends HttpDuplex {
    status: string;
    repo: string;
    service: string;
    cwd: string;
    logs: string[];
    last: string | undefined;
    commit: string | undefined;
    evName: string | undefined;
    username: string | undefined;
    /**
     * Handles invoking the git-*-pack binaries
     * @param  opts - options to bootstrap the service object
     * @param  req  - http request object
     * @param  res  - http response
     */
    constructor(opts: ServiceOptions, req: http.IncomingMessage, res: http.ServerResponse);
    log(): void;
    /**
     * reject request in flight
     * @param  code - http response code
     * @param  msg  - message that should be displayed on the client
     */
    reject(code: number, msg: string): void;
    /**
     * accepts request to access resource
     */
    accept(): void;
}
//# sourceMappingURL=service.d.ts.map