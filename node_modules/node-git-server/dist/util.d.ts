/// <reference types="node" />
import http from 'http';
import { Git } from './git';
import { HttpDuplex } from './http-duplex';
import { Service, ServiceOptions } from './service';
import { ServiceString } from './types';
export declare function packSideband(s: string): string;
/**
 * adds headers to the response object to add cache control
 * @param  res  - http response
 */
export declare function noCache(res: http.ServerResponse): void;
/**
 * sets and parses basic auth headers if they exist
 * @param  req  - http request object
 * @param  res  - http response
 * @param  callback - function(username, password)
 */
export declare function basicAuth(req: http.IncomingMessage, res: http.ServerResponse, callback: (username?: string, password?: string) => void): void;
/**
 * execute given git operation and respond
 * @param  dup  - duplex object to catch errors
 * @param  service - the method that is responding infoResponse (push, pull, clone)
 * @param  repoLocation - the repo path on disk
 * @param  res  - http response
 */
export declare function serviceRespond(dup: HttpDuplex | Git, service: ServiceString, repoLocation: string, res: http.ServerResponse): void;
/**
 * sends http response using the appropriate output from service call
 * @param  git     - an instance of git object
 * @param  repo    - the repository
 * @param  service - the method that is responding infoResponse (push, pull, clone)
 * @param  req  - http request object
 * @param  res  - http response
 */
export declare function infoResponse(git: Git, repo: string, service: ServiceString, req: http.IncomingMessage, res: http.ServerResponse): void;
/**
 * parses a git string and returns the repo name
 * @param  repo - the raw repo name containing .git
 */
export declare function parseGitName(repo: string): string;
/**
 * responds with the correct service depending on the action
 * @param  opts - options to pass Service
 * @param  req  - http request object
 * @param  res  - http response
 */
export declare function createAction(opts: ServiceOptions, req: http.IncomingMessage, res: http.ServerResponse): Service;
//# sourceMappingURL=util.d.ts.map